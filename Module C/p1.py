# This file was *autogenerated* from the file p1.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_201 = Integer(201); _sage_const_0 = Integer(0); _sage_const_342 = Integer(342); _sage_const_732 = Integer(732); _sage_const_524 = Integer(524); _sage_const_497 = Integer(497); _sage_const_1 = Integer(1); _sage_const_699 = Integer(699); _sage_const_956 = Integer(956); _sage_const_131 = Integer(131); _sage_const_111 = Integer(111); _sage_const_746 = Integer(746); _sage_const_150 = Integer(150); _sage_const_422 = Integer(422); _sage_const_234 = Integer(234); _sage_const_331 = Integer(331); _sage_const_537 = Integer(537); _sage_const_965 = Integer(965); _sage_const_803 = Integer(803); _sage_const_18 = Integer(18); _sage_const_805 = Integer(805); _sage_const_37 = Integer(37); _sage_const_121 = Integer(121); _sage_const_103 = Integer(103); _sage_const_96 = Integer(96); _sage_const_673 = Integer(673); _sage_const_630 = Integer(630)
import time
import Queue
m = Matrix([ [_sage_const_131 , _sage_const_673 , _sage_const_234 , _sage_const_103 , _sage_const_18 ], [_sage_const_201 , _sage_const_96 , _sage_const_342 , _sage_const_965 , _sage_const_150 ] ,[_sage_const_630 , _sage_const_803 , _sage_const_746 , _sage_const_422 , _sage_const_111 ], [_sage_const_537 , _sage_const_699 , _sage_const_497 , _sage_const_121 , _sage_const_956 ], [_sage_const_805 , _sage_const_732 , _sage_const_524 , _sage_const_37 , _sage_const_331 ] ])


class Node:

	def __init__(self, parent, r, c, weight):
		self.r = r
		self.c = c
		self.weight = weight
		self.leafs = []
		self.parent = parent

	def __repr__(self):
		return str((self.r, self.c)) + " - " + str(self.weight)

	def addLeaf(self, l):
		self.leafs.append(l)


	def getLeafs(self):
		return self.leafs

	def setParent(self, n):
		self.parent = n

	def getParent(self):
		return self.parent

	def hash(self):
		return (self.r, self.c)


def generateNeighbours(node, m):

	rmax = m.nrows() - _sage_const_1 
	cmax = m.ncols() - _sage_const_1 
	r, c = node.r, node.c
	neighbours = []

	#Cell below current cell.
	if r + _sage_const_1  <= rmax:
		n = Node(node, r + _sage_const_1 , c, node.weight + m[r + _sage_const_1 , c])
		neighbours.append(n)
	#Cell to the right of current cell.
	if c + _sage_const_1  <= cmax:
		n = Node(node, r, c + _sage_const_1 , node.weight + m[r, c + _sage_const_1 ])
		neighbours.append(n)
	#Cell above of current cell
	if r - _sage_const_1  >= _sage_const_0 :
		n = Node(node, r - _sage_const_1 , c, node.weight + m[r -_sage_const_1 , c])
		neighbours.append(n)

	return neighbours


def getMatrix():

	alls = []
	for line in open("matrix.txt", "r"):
		alls.append(map(int, line.split(",")))

	return Matrix(alls)

def mCp1(m=None):


	if m is None:
		m = getMatrix()

	#Root of the tree - outside of the matrix.
	root = Node(None, -_sage_const_1 , -_sage_const_1 , _sage_const_0 )
	frontier = Queue.PriorityQueue()
	explored = {}
	pqHash = {}
	#add the first nodes to the tree.
	for i in range(m.nrows()):
		w = m[i, _sage_const_0 ]
		n = Node(root, i, _sage_const_0 , w)
		root.addLeaf(n)

		frontier.put( (w, n) )
		pqHash[n.hash()] = n


	print "Generating Tree.."
	t1 = time.time()
	while True:

		if frontier.empty():
			print "Fail!"
			return None

		weight, node = frontier.get()
		#Remove it from the set that we use to remember the nodes in the pq.
		del pqHash[node.hash()]
		#Goal is that we've reached the last column.
		if node.c == m.ncols() - _sage_const_1 :
			t2 = time.time()
			print t2 - t1
			return node, weight
		explored[node.hash()] = True
		for n in generateNeighbours(node, m):
			if n.hash() not in explored:
				if n.hash() not in pqHash:
					frontier.put( (n.weight, n) )
					pqHash[n.hash()] = n
				elif pqHash[n.hash()].weight > n.weight:
					pqHash[n.hash()] = n
					frontier.put( (n.weight, n) )


ans, w = mCp1(None)
print w
