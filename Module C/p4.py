# This file was *autogenerated* from the file p4.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_500 = Integer(500); _sage_const_100000 = Integer(100000)
import sage.misc.prandom as r


def checkPrime(pos, n):
	return pos in primes(n)


def getCroak(pos, n):

	n = r.randint(_sage_const_1 , _sage_const_3 )
	isPrime = checkPrime(pos, n)

	#print pos, isPrime
	if isPrime:
		#2/3 that it croaks prime on a prime number.
		if n < _sage_const_3 :
			return _sage_const_1 
		else:
			return _sage_const_0 

	else:
		#1/3 that it croaks prime if not on a prime number.
		if n < _sage_const_2 :
			return _sage_const_1 
		else:
			return _sage_const_0 

def getJump(pos, n):

	#Right
	if pos == _sage_const_0 :
		return _sage_const_2 

	#Left
	if pos == n - _sage_const_1 :
		return _sage_const_1 

	#Else random
	return r.randint(_sage_const_1 , _sage_const_2 )


def play(n, turns):

	pos = r.randint(_sage_const_0 , n)
	current_turn = []

	for i in range(turns):
		croak = getCroak(pos, n)
		current_turn.append(croak)
		direction = getJump(pos, n)

		if direction == _sage_const_1 :
			pos -= _sage_const_1 
		else:
			pos += _sage_const_1 

	return current_turn



def mCp4(n, L, turns=_sage_const_100000 ):


	count = _sage_const_0 

	for i in range(turns):
		curr = play(n, len(L))
		if L == curr:
			count += _sage_const_1 

	return count/turns


L =  [_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ]
n = _sage_const_500 
ans = mCp4(_sage_const_2 , [_sage_const_1 ,_sage_const_0 ])
print ans
