# This file was *autogenerated* from the file moduleE.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_17p76 = RealNumber('17.76'); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_46p255 = RealNumber('46.255'); _sage_const_5p678 = RealNumber('5.678'); _sage_const_9p631 = RealNumber('9.631'); _sage_const_24p349 = RealNumber('24.349'); _sage_const_19p947 = RealNumber('19.947'); _sage_const_38p726 = RealNumber('38.726'); _sage_const_8p562 = RealNumber('8.562'); _sage_const_12p317 = RealNumber('12.317'); _sage_const_31p44 = RealNumber('31.44'); _sage_const_4 = Integer(4); _sage_const_5p221 = RealNumber('5.221'); _sage_const_12p261 = RealNumber('12.261'); _sage_const_5p077 = RealNumber('5.077'); _sage_const_35p59 = RealNumber('35.59'); _sage_const_45p205 = RealNumber('45.205'); _sage_const_25p525 = RealNumber('25.525'); _sage_const_48p783 = RealNumber('48.783'); _sage_const_37p541 = RealNumber('37.541'); _sage_const_37p402 = RealNumber('37.402'); _sage_const_16p987 = RealNumber('16.987'); _sage_const_49p667 = RealNumber('49.667'); _sage_const_42p857 = RealNumber('42.857'); _sage_const_18p684 = RealNumber('18.684'); _sage_const_40p24 = RealNumber('40.24'); _sage_const_32p152 = RealNumber('32.152'); _sage_const_23p709 = RealNumber('23.709'); _sage_const_15p954 = RealNumber('15.954'); _sage_const_1p782 = RealNumber('1.782'); _sage_const_15p084 = RealNumber('15.084'); _sage_const_44p164 = RealNumber('44.164'); _sage_const_8p069 = RealNumber('8.069'); _sage_const_9p52 = RealNumber('9.52'); _sage_const_42p666 = RealNumber('42.666'); _sage_const_4p557 = RealNumber('4.557'); _sage_const_8p505 = RealNumber('8.505'); _sage_const_28p064 = RealNumber('28.064'); _sage_const_4p946 = RealNumber('4.946'); _sage_const_4p467 = RealNumber('4.467'); _sage_const_47p516 = RealNumber('47.516'); _sage_const_10p058 = RealNumber('10.058'); _sage_const_42p573 = RealNumber('42.573'); _sage_const_30p533 = RealNumber('30.533'); _sage_const_10p303 = RealNumber('10.303'); _sage_const_48p857 = RealNumber('48.857'); _sage_const_18p503 = RealNumber('18.503'); _sage_const_16p612 = RealNumber('16.612'); _sage_const_25p33 = RealNumber('25.33'); _sage_const_12p945 = RealNumber('12.945'); _sage_const_39p902 = RealNumber('39.902'); _sage_const_18p726 = RealNumber('18.726'); _sage_const_38p798 = RealNumber('38.798'); _sage_const_2p818 = RealNumber('2.818'); _sage_const_22p607 = RealNumber('22.607'); _sage_const_21p755 = RealNumber('21.755'); _sage_const_49p799 = RealNumber('49.799'); _sage_const_29p46 = RealNumber('29.46'); _sage_const_26p257 = RealNumber('26.257'); _sage_const_18p817 = RealNumber('18.817'); _sage_const_1p016 = RealNumber('1.016'); _sage_const_21p852 = RealNumber('21.852'); _sage_const_35p404 = RealNumber('35.404'); _sage_const_5p31 = RealNumber('5.31'); _sage_const_16p158 = RealNumber('16.158'); _sage_const_3p954 = RealNumber('3.954'); _sage_const_24p739 = RealNumber('24.739'); _sage_const_10p468 = RealNumber('10.468'); _sage_const_43p545 = RealNumber('43.545'); _sage_const_48p493 = RealNumber('48.493'); _sage_const_24p348 = RealNumber('24.348'); _sage_const_47p592 = RealNumber('47.592'); _sage_const_19p615 = RealNumber('19.615'); _sage_const_12p72 = RealNumber('12.72'); _sage_const_26p949 = RealNumber('26.949'); _sage_const_46p325 = RealNumber('46.325'); _sage_const_6p259 = RealNumber('6.259'); _sage_const_17p07 = RealNumber('17.07'); _sage_const_8p082 = RealNumber('8.082'); _sage_const_12p874 = RealNumber('12.874'); _sage_const_24p955 = RealNumber('24.955'); _sage_const_1p915 = RealNumber('1.915')

def mEp1(x, y):

	sum = _sage_const_0 
	for i in range(len(x)):
		sum += (x[i] - y[i])**_sage_const_2 
	return sqrt(sum).n()

def mEp2(x, y):

	sum = _sage_const_0 
	for i in range(len(x)):
		sum += abs(x[i] - y[i])
	return sum


def mEp3(x, y):

	sum = _sage_const_0 
	for i in range(len(x)):
		if x[i] != y[i]:
			sum += _sage_const_1 
	return sum

def lev(x, lenx, y, leny):
	if lenx == _sage_const_0 : 
		return leny
	if leny == _sage_const_0 : 
		return lenx

	if x[lenx - _sage_const_1 ] == y[leny - _sage_const_1 ]: 
		cost = _sage_const_0 
	else: 
		cost = _sage_const_1 

	return min( lev(x, lenx - _sage_const_1 , y, leny) + _sage_const_1 ,\
		        lev(x, lenx, y, leny - _sage_const_1 ) + _sage_const_1 ,\
		        lev(x, lenx - _sage_const_1  , y, leny - _sage_const_1 ) + cost  \
		      )

def mEp4(x, y):

	return lev(x, len(x), y, len(y))


def mEp6(L, dist):

	#If we only have two points, we should also just have a single class.
	if len(L) == _sage_const_2 :
		return L[_sage_const_0 ][_sage_const_1 ] == L[_sage_const_1 ][_sage_const_1 ]

	#Store sorted points.
	classes = {}
	#Map class distances.
	distances = {}
	#Stray points
	strays = []
	#We sort the points into their classes, so that we can verify each class.
	for p in L:
		if p[_sage_const_1 ] not in  classes:
			classes[p[_sage_const_1 ]] = []
		classes[p[_sage_const_1 ]].append(p)

	#Check the expected distances value for each classification.
	for c in classes:
		points = classes[c]
		#If we only have one pair in this class, we can assume the distance value for that class is that distance.
		if len(points) == _sage_const_2 :
			distances[c] = dist(points[_sage_const_0 ][_sage_const_0 ], points[_sage_const_1 ][_sage_const_0 ])
		#If we have a stray point (point mapped to a single class) we have to check it later.
		elif len(points) == _sage_const_1 :
			strays.append(points[_sage_const_0 ])
		#If we have more than one pair - we have to check all distances between all points in the same class, since they should all have the same distance.
		else:
			for p1 in points:
				for p2 in points:
					if p1 is not p2:
						#If we know the distance value already, the distance between the current points should be that value.
						if c in distances:
							if dist(p1[_sage_const_0 ], p1[_sage_const_0 ]) != distances[c]:
								#If it isn't, we found a wrongly classified point.
								return False

	print distances
	for s in strays:
		for p in L:
			if s is p:
				continue
			d = dist(s[_sage_const_0 ], p[_sage_const_0 ])
			print "Checking ", d
			for known in distances:
				#We now check the distance of the stray point against the known distances.
				#If we find a distance we already know - we have a point that's wrongly classified.
				if d == distances[known]:
					return False
	for p1 in L:
		for p2 in L:
			if p1 is not p2 and p1[_sage_const_1 ] == p2[_sage_const_1 ]:
				#print "Comparing", L.index(p1), "with", L.index(p2)
				correct = True if (dist(p1[_sage_const_0 ], p2[_sage_const_0 ]) == distances[p1[_sage_const_1 ]]) else False
				#print dist(p1[0], p2[0]), p1[1], p2[1], correct
				if correct is False:
					return False
	return correct

ans = mEp6([((_sage_const_18p684 ,-_sage_const_35p59 ,-_sage_const_12p72 ,-_sage_const_4p557 ,_sage_const_38p798 ,_sage_const_15p954 ,_sage_const_19p615 ,-_sage_const_37p402 ,-_sage_const_18p726 ,-_sage_const_16p158 ,_sage_const_25p33 ,-_sage_const_28p064 ,-_sage_const_12p945 ,-_sage_const_16p612 ,-_sage_const_21p755 ,_sage_const_48p783 ), _sage_const_0 ),((_sage_const_42p666 ,-_sage_const_24p739 ,-_sage_const_5p678 ,-_sage_const_40p24 ,_sage_const_10p303 ,_sage_const_29p46 ,-_sage_const_39p902 ,_sage_const_46p325 ,-_sage_const_19p947 ,_sage_const_22p607 ,-_sage_const_23p709 ,_sage_const_26p949 ,_sage_const_47p592 ,_sage_const_42p573 ,-_sage_const_31p44 ,-_sage_const_42p857 ), _sage_const_0 ),((-_sage_const_47p516 ,_sage_const_37p541 ,_sage_const_48p493 ,-_sage_const_3p954 ,_sage_const_17p07 ,_sage_const_6p259 ,_sage_const_30p533 ,_sage_const_16p987 ,_sage_const_43p545 ,_sage_const_48p857 ,_sage_const_5p077 ,-_sage_const_15p084 ,_sage_const_8p505 ,-_sage_const_44p164 ,_sage_const_5p31 ,_sage_const_12p261 ), _sage_const_2 ),((-_sage_const_1p782 ,-_sage_const_24p349 ,-_sage_const_17p76 ,-_sage_const_38p726 ,-_sage_const_25p525 ,-_sage_const_12p317 ,_sage_const_45p205 ,-_sage_const_12p874 ,-_sage_const_18p503 ,-_sage_const_21p852 ,-_sage_const_10p058 ,_sage_const_35p404 ,_sage_const_1p016 ,_sage_const_24p348 ,_sage_const_10p468 ,-_sage_const_8p082 ), _sage_const_2 ),((-_sage_const_4p946 ,-_sage_const_8p562 ,-_sage_const_18p817 ,-_sage_const_26p257 ,-_sage_const_4p467 ,_sage_const_2p818 ,-_sage_const_24p955 ,-_sage_const_8p069 ,-_sage_const_5p221 ,_sage_const_32p152 ,_sage_const_49p667 ,-_sage_const_9p631 ,-_sage_const_1p915 ,_sage_const_9p52 ,_sage_const_49p799 ,_sage_const_46p255 ), _sage_const_4 )], mEp2)
print ans
